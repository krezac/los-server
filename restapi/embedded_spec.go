// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a data server for LOS shooting competition.",
    "title": "LOS data server",
    "termsOfService": "http://todo/terms/",
    "contact": {
      "email": "todo@los.cz"
    },
    "license": {
      "name": "GNU General Public License v3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/competitions/{competitionId}": {
      "get": {
        "security": [],
        "description": "Returns a single competition",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "Find competition by ID",
        "operationId": "getCompetitionById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of competition to return",
            "name": "competitionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Competition"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Shooting range not competition",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "description": "This can only be done by admin.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "Updated competition",
        "operationId": "updateCompetiton",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of competition to update",
            "name": "competitionId",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated competition object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Competition"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid competition supplied"
          },
          "404": {
            "description": "Competition not found"
          }
        }
      },
      "delete": {
        "description": "This can only be done by admin.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "Delete competition",
        "operationId": "deleteCompetition",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of competition to delete",
            "name": "competitionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid competition supplied"
          },
          "404": {
            "description": "Competition not found"
          }
        }
      }
    },
    "/range/{rangeId}": {
      "get": {
        "security": [],
        "description": "Returns a single shooting range",
        "produces": [
          "application/json"
        ],
        "tags": [
          "range"
        ],
        "summary": "Find shooting range by ID",
        "operationId": "getRangeById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of shooting range to return",
            "name": "rangeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Range"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Shooting range not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/ranges": {
      "get": {
        "security": [],
        "description": "Returns a list of shooting ranges",
        "produces": [
          "application/json"
        ],
        "tags": [
          "range"
        ],
        "summary": "List shooting ranges in the system",
        "operationId": "getRanges",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Return active only ranges",
            "name": "activeOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Range"
              }
            }
          },
          "500": {
            "description": "Retrieving list of ranges failed",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/ranges/html": {
      "get": {
        "security": [],
        "description": "Returns a list of shooting ranges as HTML page",
        "produces": [
          "text/html"
        ],
        "tags": [
          "range"
        ],
        "summary": "List shooting ranges in the system as HTML page",
        "operationId": "getRangesHtml",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Return active only ranges",
            "name": "activeOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HtmlResponse"
            }
          },
          "500": {
            "description": "Retrieving list of ranges failed",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/ranges/{rangeId}/competition": {
      "post": {
        "description": "This can only be done by admin. Only id needs to be probided for subobjects (type, category).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "Create new competiton",
        "operationId": "createCompetition",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the range the competition is created for",
            "name": "rangeId",
            "in": "path",
            "required": true
          },
          {
            "description": "Created competition object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Competition"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ranges/{rangeId}/competitions": {
      "get": {
        "security": [],
        "description": "Returns a list of competitions for shooting range",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "List competitions for given shooting",
        "operationId": "getCompetitions",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of shooting range to read the competitions for",
            "name": "rangeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Competition"
              }
            }
          },
          "500": {
            "description": "Retrieving list of competitions failed",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/ranges/{rangeId}/competitions/html": {
      "get": {
        "security": [],
        "description": "Returns a list of competitions for shooting range as HTML page",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "List competitions for given shooting range as HTML page",
        "operationId": "getCompetitionsHtml",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of shooting range to read the competitions for",
            "name": "rangeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HtmlResponse"
            }
          },
          "500": {
            "description": "Retrieving list of ranges failed",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "security": [],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "Created competition object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            },
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            }
          },
          "400": {
            "description": "Invalid payload or empty login passed",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Invalid username/password supplied",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "name that need to be updated",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be deleted",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Competition": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/CompetitionCategory"
        },
        "date": {
          "description": "date of the competition",
          "type": "string",
          "format": "date"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "10 ran a dost"
        },
        "type": {
          "$ref": "#/definitions/CompetitionType"
        }
      }
    },
    "CompetitionCategory": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "KZ"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Kratka zbran"
        }
      }
    },
    "CompetitionType": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "P"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Poharova"
        }
      }
    },
    "HtmlResponse": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object"
        },
        "template": {
          "type": "string"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "Range": {
      "type": "object",
      "properties": {
        "active": {
          "description": "shooting range active",
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "example": "50.1488390"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "example": "14.7349610"
        },
        "name": {
          "type": "string",
          "example": "SSK Celakovice"
        },
        "url": {
          "type": "string",
          "example": "https://zbranekvalitne.cz/strelnice/ssk-celakovice"
        }
      }
    },
    "Situation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Do pekla a zpet"
        },
        "number": {
          "type": "integer",
          "format": "integer"
        },
        "targets": {
          "description": "list of situations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Target"
          }
        }
      }
    },
    "Target": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/TargetType"
        }
      }
    },
    "TargetType": {
      "type": "object",
      "properties": {
        "hits": {
          "description": "Number of required hits",
          "type": "integer",
          "minimum": 1
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Steel"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "description": "User Status",
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "principal": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "los_auth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "tokenUrl": "https://dumy.oauth.net/token",
      "scopes": {
        "admin": "all other administrative tasks",
        "competitor": "view personal details during competition",
        "director": "manages the competition",
        "judge": "enter new results, move people",
        "registered": "view publically available info (i.e. dashboards)"
      }
    }
  },
  "security": [
    {
      "los_auth": [
        "admin"
      ]
    }
  ],
  "tags": [
    {
      "description": "User authentication - login / logout",
      "name": "login"
    },
    {
      "description": "Access to shooting ranges",
      "name": "range"
    },
    {
      "description": "Access to competitons",
      "name": "competition",
      "externalDocs": {
        "description": "Find out more about the competitions",
        "url": "http://los.zbranekvalitne.cz"
      }
    },
    {
      "description": "Access to competitors",
      "name": "competitor"
    },
    {
      "description": "Access to squads (groups of competitors)",
      "name": "squad"
    },
    {
      "description": "Access to situations",
      "name": "situation"
    },
    {
      "description": "Access to targets",
      "name": "target"
    },
    {
      "description": "Access to users",
      "name": "user"
    },
    {
      "description": "Everything about your Pets",
      "name": "pet",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "description": "Access to Petstore orders",
      "name": "store"
    },
    {
      "description": "Operations about user",
      "name": "user"
    }
  ],
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a data server for LOS shooting competition.",
    "title": "LOS data server",
    "termsOfService": "http://todo/terms/",
    "contact": {
      "email": "todo@los.cz"
    },
    "license": {
      "name": "GNU General Public License v3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/competitions/{competitionId}": {
      "get": {
        "security": [],
        "description": "Returns a single competition",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "Find competition by ID",
        "operationId": "getCompetitionById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of competition to return",
            "name": "competitionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Competition"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Shooting range not competition",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "description": "This can only be done by admin.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "Updated competition",
        "operationId": "updateCompetiton",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of competition to update",
            "name": "competitionId",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated competition object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Competition"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid competition supplied"
          },
          "404": {
            "description": "Competition not found"
          }
        }
      },
      "delete": {
        "description": "This can only be done by admin.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "Delete competition",
        "operationId": "deleteCompetition",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of competition to delete",
            "name": "competitionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid competition supplied"
          },
          "404": {
            "description": "Competition not found"
          }
        }
      }
    },
    "/range/{rangeId}": {
      "get": {
        "security": [],
        "description": "Returns a single shooting range",
        "produces": [
          "application/json"
        ],
        "tags": [
          "range"
        ],
        "summary": "Find shooting range by ID",
        "operationId": "getRangeById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of shooting range to return",
            "name": "rangeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Range"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Shooting range not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/ranges": {
      "get": {
        "security": [],
        "description": "Returns a list of shooting ranges",
        "produces": [
          "application/json"
        ],
        "tags": [
          "range"
        ],
        "summary": "List shooting ranges in the system",
        "operationId": "getRanges",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Return active only ranges",
            "name": "activeOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Range"
              }
            }
          },
          "500": {
            "description": "Retrieving list of ranges failed",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/ranges/html": {
      "get": {
        "security": [],
        "description": "Returns a list of shooting ranges as HTML page",
        "produces": [
          "text/html"
        ],
        "tags": [
          "range"
        ],
        "summary": "List shooting ranges in the system as HTML page",
        "operationId": "getRangesHtml",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Return active only ranges",
            "name": "activeOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HtmlResponse"
            }
          },
          "500": {
            "description": "Retrieving list of ranges failed",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/ranges/{rangeId}/competition": {
      "post": {
        "description": "This can only be done by admin. Only id needs to be probided for subobjects (type, category).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "Create new competiton",
        "operationId": "createCompetition",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the range the competition is created for",
            "name": "rangeId",
            "in": "path",
            "required": true
          },
          {
            "description": "Created competition object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Competition"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ranges/{rangeId}/competitions": {
      "get": {
        "security": [],
        "description": "Returns a list of competitions for shooting range",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "List competitions for given shooting",
        "operationId": "getCompetitions",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of shooting range to read the competitions for",
            "name": "rangeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Competition"
              }
            }
          },
          "500": {
            "description": "Retrieving list of competitions failed",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/ranges/{rangeId}/competitions/html": {
      "get": {
        "security": [],
        "description": "Returns a list of competitions for shooting range as HTML page",
        "produces": [
          "application/json"
        ],
        "tags": [
          "competition"
        ],
        "summary": "List competitions for given shooting range as HTML page",
        "operationId": "getCompetitionsHtml",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of shooting range to read the competitions for",
            "name": "rangeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HtmlResponse"
            }
          },
          "500": {
            "description": "Retrieving list of ranges failed",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "security": [],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "Created competition object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            },
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            }
          },
          "400": {
            "description": "Invalid payload or empty login passed",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Invalid username/password supplied",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "name that need to be updated",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be deleted",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Competition": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/CompetitionCategory"
        },
        "date": {
          "description": "date of the competition",
          "type": "string",
          "format": "date"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "10 ran a dost"
        },
        "type": {
          "$ref": "#/definitions/CompetitionType"
        }
      }
    },
    "CompetitionCategory": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "KZ"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Kratka zbran"
        }
      }
    },
    "CompetitionType": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "P"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Poharova"
        }
      }
    },
    "HtmlResponse": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object"
        },
        "template": {
          "type": "string"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "Range": {
      "type": "object",
      "properties": {
        "active": {
          "description": "shooting range active",
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "example": "50.1488390"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "example": "14.7349610"
        },
        "name": {
          "type": "string",
          "example": "SSK Celakovice"
        },
        "url": {
          "type": "string",
          "example": "https://zbranekvalitne.cz/strelnice/ssk-celakovice"
        }
      }
    },
    "Situation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Do pekla a zpet"
        },
        "number": {
          "type": "integer",
          "format": "integer"
        },
        "targets": {
          "description": "list of situations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Target"
          }
        }
      }
    },
    "Target": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/TargetType"
        }
      }
    },
    "TargetType": {
      "type": "object",
      "properties": {
        "hits": {
          "description": "Number of required hits",
          "type": "integer",
          "minimum": 1
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Steel"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "description": "User Status",
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "principal": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "los_auth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "tokenUrl": "https://dumy.oauth.net/token",
      "scopes": {
        "admin": "all other administrative tasks",
        "competitor": "view personal details during competition",
        "director": "manages the competition",
        "judge": "enter new results, move people",
        "registered": "view publically available info (i.e. dashboards)"
      }
    }
  },
  "security": [
    {
      "los_auth": [
        "admin"
      ]
    }
  ],
  "tags": [
    {
      "description": "User authentication - login / logout",
      "name": "login"
    },
    {
      "description": "Access to shooting ranges",
      "name": "range"
    },
    {
      "description": "Access to competitons",
      "name": "competition",
      "externalDocs": {
        "description": "Find out more about the competitions",
        "url": "http://los.zbranekvalitne.cz"
      }
    },
    {
      "description": "Access to competitors",
      "name": "competitor"
    },
    {
      "description": "Access to squads (groups of competitors)",
      "name": "squad"
    },
    {
      "description": "Access to situations",
      "name": "situation"
    },
    {
      "description": "Access to targets",
      "name": "target"
    },
    {
      "description": "Access to users",
      "name": "user"
    },
    {
      "description": "Everything about your Pets",
      "name": "pet",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "description": "Access to Petstore orders",
      "name": "store"
    },
    {
      "description": "Operations about user",
      "name": "user"
    }
  ],
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}`))
}
