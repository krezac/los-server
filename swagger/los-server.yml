swagger: "2.0"
info:
  description: "This is a data server for LOS shooting competition."
  version: "1.0.0"
  title: "LOS data server"
  termsOfService: "http://todo/terms/"
  contact:
    email: "todo@los.cz"
  license:
    name: "GNU General Public License v3.0"
    url: "https://www.gnu.org/licenses/gpl-3.0.html"
host: "localhost:8080"
basePath: "/v1"
tags:
- name: "login"
  description: "User authentication - login / logout"
- name: "range"
  description: "Access to shooting ranges"
- name: "competition"
  externalDocs:
    description: "Find out more about the competitions"
    url: "http://los.zbranekvalitne.cz"
  description: "Access to competitons"
- name: "competitor"
  description: "Access to competitors"
- name: "squad"
  description: "Access to squads (groups of competitors)"
- name: "situation"
  description: "Access to situations"
- name: "target"
  description: "Access to targets"
- name: "user"
  description: "Access to users"
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
schemes:
- "http"
- "https"
consumes:  # these need to be on top level to validate payloads correctly 
- "application/json"
paths:
  /ranges:
    get:
      tags:
      - "range"
      summary: "List shooting ranges in the system"
      description: "Returns a list of shooting ranges"
      operationId: "getRanges"
      produces:
      - "application/json"
      parameters:
      - name: "activeOnly"
        in: "query"
        description: "Return active only ranges"
        required: false
        default: true
        type: "boolean"
      security: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Range"
        500:
          description: "Retrieving list of ranges failed"
          schema:
            $ref: "#/definitions/ApiResponse"
  /ranges/html:
    get:
      tags:
      - "range"
      summary: "List shooting ranges in the system as HTML page"
      description: "Returns a list of shooting ranges as HTML page"
      operationId: "getRangesHtml"
      produces:
      - "text/html"
      parameters:
      - name: "activeOnly"
        in: "query"
        description: "Return active only ranges"
        required: false
        default: true
        type: "boolean"
      security: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/HtmlResponse"
        500:
          description: "Retrieving list of ranges failed"
          schema:
            type: "string"
  /range/{rangeId}:
    get:
      tags:
      - "range"
      summary: "Find shooting range by ID"
      description: "Returns a single shooting range"
      operationId: "getRangeById"
      produces:
      - "application/json"
      parameters:
      - name: "rangeId"
        in: "path"
        description: "ID of shooting range to return"
        required: true
        type: "integer"
        format: "int64"
      security: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Range"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Shooting range not found"
          schema:
            $ref: "#/definitions/ApiResponse"
  /ranges/{rangeId}/competitions:
    get:
      tags:
      - "competition"
      summary: "List competitions for given shooting"
      description: "Returns a list of competitions for shooting range"
      operationId: "getCompetitions"
      produces:
      - "application/json"
      parameters:
      - name: "rangeId"
        in: "path"
        description: "ID of shooting range to read the competitions for"
        required: true
        type: "integer"
        format: "int64"
      - name: "activeOnly"
        in: "query"
        description: "Return active only ranges"
        required: false
        default: true
        type: "boolean"
      security: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Competition"
        500:
          description: "Retrieving list of competitions failed"
          schema:
            $ref: "#/definitions/ApiResponse"
  /ranges/{rangeId}/competitions/html:
    get:
      tags:
      - "competition"
      summary: "List competitions for given shooting range as HTML page"
      description: "Returns a list of competitions for shooting range as HTML page"
      operationId: "getCompetitionsHtml"
      produces:
      - "application/json"
      parameters:
      - name: "rangeId"
        in: "path"
        description: "ID of shooting range to read the competitions for"
        required: true
        type: "integer"
        format: "int64"
      security: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/HtmlResponse"
        500:
          description: "Retrieving list of ranges failed"
          schema:
            type: "string"
  /competitions/{competitionId}:
    get:
      tags:
      - "competition"
      summary: "Find competition by ID"
      description: "Returns a single competition"
      operationId: "getCompetitionById"
      produces:
      - "application/json"
      parameters:
      - name: "competitionId"
        in: "path"
        description: "ID of competition to return"
        required: true
        type: "integer"
        format: "int64"
      security: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Competition"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Shooting range not competition"
          schema:
            $ref: "#/definitions/ApiResponse"
    put:
      tags:
      - "competition"
      summary: "Updated competition"
      description: "This can only be done by admin."
      operationId: "updateCompetiton"
      produces:
      - "application/json"
      parameters:
      - name: "competitionId"
        in: "path"
        description: "ID of competition to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "Updated competition object"
        required: true
        schema:
          $ref: "#/definitions/Competition"
      responses:
        400:
          description: "Invalid competition supplied"
        404:
          description: "Competition not found"
    delete:
      tags:
      - "competition"
      summary: "Delete competition"
      description: "This can only be done by admin."
      operationId: "deleteCompetition"
      produces:
      - "application/json"
      parameters:
      - name: "competitionId"
        in: "path"
        description: "ID of competition to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid competition supplied"
        404:
          description: "Competition not found"
  /ranges/{rangeId}/competition:
    post:
      tags:
      - "competition"
      summary: "Create new competiton"
      description: "This can only be done by admin. Only id needs to be probided for subobjects (type, category)."
      operationId: "createCompetition"
      produces:
      - "application/json"
      parameters:
      - name: "rangeId"
        in: "path"
        description: "ID of the range the competition is created for"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Created competition object"
        required: true
        schema:
          $ref: "#/definitions/Competition"
      responses:
        default:
          description: "successful operation"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    post:
      tags:
      - "login"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created competition object"
        required: true
        schema:
          $ref: "#/definitions/LoginRequest"
      security: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponse"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid payload or empty login passed"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "Invalid username/password supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
  /user/logout:
    get:
      tags:
      - "login"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  los_auth: # based on description https://github.com/go-swagger/go-swagger/tree/master/examples/composed-auth
    type: oauth2
    # The flow and URLs in spec are for documentary purpose: go-swagger does not implement OAuth workflows
    authorizationUrl: 'https://dummy.oauth.net/auth'
    tokenUrl: 'https://dumy.oauth.net/token'
    flow: accessCode
    scopes:
      registered: view publically available info (i.e. dashboards)
      competitor: view personal details during competition
      judge: enter new results, move people
      director: manages the competition
      admin: all other administrative tasks
security:
  - los_auth: ["admin"]
definitions:
  principal:
    type: object 
    properties: 
      name: 
        type: string
      roles:
        type: array 
        items: 
          type: string
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  HtmlResponse:
    type: "object"
    properties:
      template:
        type: "string"
      payload:
        type: "object"
  LoginRequest:
    type: "object"
    properties:
      login:
        type: "string"
      password:
        type: "string"
  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
  Range:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "SSK Celakovice"
      latitude:
        type: "number"
        format: "double"
        example: "50.1488390"
      longitude:
        type: "number"
        format: "double"
        example: "14.7349610"
      url:
        type: "string"
        example: "https://zbranekvalitne.cz/strelnice/ssk-celakovice"
      active:
        type: "boolean"
        description: "shooting range active"
  Competition:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "10 ran a dost"
      eventDate:
        type: "string"
        format: "date"
        description: "date of the competition"
      category:
        $ref: "#/definitions/CompetitionCategory"
      type:
        $ref: "#/definitions/CompetitionType"
  CompetitionCategory:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      code:
        type: "string"
        example: "KZ"
      name:
        type: "string"
        example: "Kratka zbran"
  CompetitionType:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      code:
        type: "string"
        example: "P"
      name:
        type: "string"
        example: "Poharova"
  Situation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      number:
        type: "integer"
        format: "integer"
      name:
        type: "string"
        example: "Do pekla a zpet"
      targets:
        type: "array"
        items:
          $ref: "#/definitions/Target"
        description: "list of situations"
  Target:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      type:
        $ref: "#/definitions/TargetType"
  TargetType:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Steel"
      hits:
        type: "integer"
        description: "Number of required hits"
        minimum: 1
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
