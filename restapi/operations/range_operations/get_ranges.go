// Code generated by go-swagger; DO NOT EDIT.

package range_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRangesHandlerFunc turns a function with the right signature into a get ranges handler
type GetRangesHandlerFunc func(GetRangesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRangesHandlerFunc) Handle(params GetRangesParams) middleware.Responder {
	return fn(params)
}

// GetRangesHandler interface for that can handle valid get ranges params
type GetRangesHandler interface {
	Handle(GetRangesParams) middleware.Responder
}

// NewGetRanges creates a new http.Handler for the get ranges operation
func NewGetRanges(ctx *middleware.Context, handler GetRangesHandler) *GetRanges {
	return &GetRanges{Context: ctx, Handler: handler}
}

/*GetRanges swagger:route GET /ranges range getRanges

List shooting ranges in the system

Returns a list of shooting ranges

*/
type GetRanges struct {
	Context *middleware.Context
	Handler GetRangesHandler
}

func (o *GetRanges) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRangesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
